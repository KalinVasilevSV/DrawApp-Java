/**
 * Shape.java
 */

package draw.Model;

import java.awt.*;
import java.io.Serializable;

/**
 *   Базовия клас на примитивите, който съдържа общите характеристики на примитивите.
 */
public abstract class Shape implements Serializable{
    /**
     *   Обхващащ правоъгълник на елемента.
     */
    private Rectangle rectangle;
    
    /**
     *   Цвят на елемента.
     */
    private Color fillColor;
    private Color borderColor;
    private String name;
    private boolean isSelected = false;
    private int rotation = 0;
    private draw.Model.MyBasicStroke borderStroke= new MyBasicStroke();
    
    public static Color selectionColor = java.awt.Color.RED;
    
    public Shape() {
    }

    public Shape(Rectangle rect) {
        rectangle = rect;
    }

    public Shape(draw.Model.Shape shape) {
        this.setHeight(shape.getHeight());
        this.setLocation(shape.getLocation());
        this.rectangle = shape.rectangle;
        this.setWidth(shape.getWidth());
        this.setFillColor(shape.getFillColor());
        this.setBorderColor(shape.getBorderColor());
    }

    /**
     * Проверка дали точка point принадлежи на елемента.
     * @param point - Точка.
     * @return Връща true, ако точката принадлежи на елемента и false, ако не пренадлежи.
     */
    public boolean Contains(Point point) {
        return getRectangle().contains(point);
    }

    /**
     * Визуализира елемента.
     * @param grfx - Къде да бъде визуализиран елемента.
     */
    public void DrawSelf(Graphics grfx) {
        //  shape.Rectangle.Inflate(shape.BorderWidth, shape.BorderWidth)
    }
    
    public Rectangle getRectangle() {
        return rectangle;
    }

    public void setRectangle(Rectangle value) {
        rectangle = value;
    }

    public int getWidth() {
        return this.getRectangle().width;
    }

    public void setWidth(int value) {
        rectangle.width = value;
    }

    public int getHeight() {
        return this.getRectangle().height;
    }

    public void setHeight(int value) {
        rectangle.height = value;
    }

    public Point getLocation() {
        return this.getRectangle().getLocation();
    }

    public void setLocation(Point value) {
        rectangle.setLocation(value);
    }

    public java.awt.Color getFillColor() {
        return fillColor;
    }

    public void setFillColor(java.awt.Color value) {
        fillColor = value;
    }

	public Color getBorderColor() {
		return borderColor;
	}

	public void setBorderColor(Color borderColor) {
		this.borderColor = borderColor;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isSelected() {
		return isSelected;
	}

	public void setSelected(boolean isSelected) {
		this.isSelected = isSelected;
	}

	public int getRotation() {
		return rotation;
	}

	public void setRotation(int rotation) {
		this.rotation = rotation;
	}

	public MyBasicStroke getBorderStroke() {
		return borderStroke;
	}

	public void setBorderStroke(MyBasicStroke borderStroke) {
		this.borderStroke = borderStroke;
	}
}
